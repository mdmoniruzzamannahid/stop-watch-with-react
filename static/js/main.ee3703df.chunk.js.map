{"version":3,"sources":["components/Title/Title.js","components/countDown/digit/Digit.js","components/countDown/CountDown.js","components/controller/Controller.js","components/laps/Laps.js","components/App.js","serviceWorker.js","index.js"],"names":["Title","props","state","title","isInput","this","setState","event","target","value","key","output","className","onChange","inputChange","onKeyPress","keyPressHandeler","onBlur","blurHandeler","type","onClick","editHandler","Component","Digit","style","borderColor","color","CountDown","time","min","sec","mili","Controller","start","pause","lap","reset","startHandler","pauseHandler","lapHandler","resetHandler","getController","Laps","laps","map","index","App","intervalId","setInterval","clearInterval","getStarted","bind","getPause","getReset","getLap","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ee3703df.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Title.css'\r\n\r\nclass Title extends Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            title: \"Stop watch\",\r\n            isInput: false\r\n        }\r\n    }\r\n\r\n   editHandler(){\r\n    this.setState({\r\n        ...this.state,\r\n        isInput: true\r\n    })\r\n   }\r\n\r\n   inputChange(event){\r\n        this.setState({\r\n            ...this.state,\r\n            title: event.target.value\r\n        })\r\n   }\r\n\r\n   keyPressHandeler(event){\r\n        if(event.key === 'Enter'){\r\n            this.setState({\r\n                ...this.state,\r\n                isInput: false\r\n            })\r\n        }\r\n   }\r\n\r\n   blurHandeler(event){\r\n    this.setState({\r\n        ...this.state,\r\n        isInput: false\r\n    })\r\n   }\r\n\r\n\r\n    render(){\r\n\r\n        let output = null;\r\n\r\n        if(this.state.isInput){\r\n            output=(\r\n                <div className=\"title\">\r\n                    <input className=\"form-control\"\r\n                    onChange={ event =>this.inputChange(event)}\r\n                    onKeyPress={ event => this.keyPressHandeler(event)}\r\n                    onBlur={ event => this.blurHandeler(event)}\r\n                    type=\"text\" \r\n                    value={ this.state.title }\r\n                    />\r\n                </div>\r\n            )\r\n        }else{\r\n            output = (\r\n                <div className=\"d-flex title\">\r\n                    <h1 className = \"display-4\">{ this.state.title }</h1>\r\n                    <span onClick={ ()=> this.editHandler() } className=\"ml-auto edit-icon\">\r\n                    <i className=\"fas fa-pencil-alt\"></i>\r\n                    </span>\r\n                </div>\r\n            )\r\n        }\r\n\r\n\r\n        return(\r\n        <div>\r\n            { output }\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Title;","import React from 'react'\r\nimport './Digit.css'\r\n\r\n\r\nconst Digit = (props) => {\r\n    return(\r\n       <div className=\"digit mx-3\" style={{ borderColor: props.color }}>\r\n           <h1 className=\"display-2 py-3\" style={{ color:props.color }}>{ props.value < 10 ? `0${props.value}` : props.value }</h1>\r\n       </div>\r\n        \r\n    )\r\n}\r\nexport default Digit","import React from 'react'\r\nimport Digit from './digit/Digit'\r\n\r\n\r\nconst CountDown = (props) => {\r\n    return(\r\n        <div className=\"d-flex text-center mt-5\">\r\n            <Digit color=\"palegreen\" value={props.time.min}/>\r\n            <Digit color=\"skyblue\" value={props.time.sec}/>\r\n            <Digit color=\"salmon\" value={props.time.mili}/>\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default CountDown","import React,{Component} from 'react'\r\n\r\nclass Controller extends Component{\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            start: true,\r\n            pause: false,\r\n            lap: false,\r\n            reset: false\r\n        }\r\n\r\n    }\r\n\r\n    startHandler(){\r\n        this.setState({\r\n            ...this.state,\r\n            start:false,\r\n            pause:true,\r\n            lap:true\r\n        })\r\n        this.props.start()\r\n    }\r\n\r\n    pauseHandler(){\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            start:true,\r\n            pause:false,\r\n            reset: true\r\n        })\r\n        this.props.pause()\r\n    }\r\n\r\n    lapHandler(){\r\n        this.props.lap()\r\n    }\r\n    resetHandler(){\r\n        this.setState({\r\n            start: true,\r\n            pause: false,\r\n            lap: false,\r\n            reset: false\r\n        })\r\n        this.props.reset()\r\n    }\r\n\r\n    getController(){\r\n        let output = null\r\n\r\n        if(this.state.start && !this.state.reset){\r\n            output = (\r\n                <div className=\"my-5\">\r\n                    <button \r\n                    className=\"btn btn-success btn-lg px-5 ml-5\"\r\n                    onClick = {event => this.startHandler()}\r\n                    >Start\r\n                    </button>\r\n                </div>\r\n            )\r\n            \r\n        }else if(this.state.pause && this.state.lap){\r\n            output =(\r\n                <div className=\"my-5\">\r\n                    <button \r\n                    className=\"btn btn-info btn-lg px-5 ml-5\"\r\n                    onClick = {event => this.pauseHandler()}\r\n                    >pause\r\n                    </button>\r\n                    <button \r\n                    className=\"btn btn-warning btn-lg px-5 ml-5\"\r\n                    onClick = {event => this.lapHandler()}\r\n                    >lap\r\n                    </button>\r\n                </div>\r\n            )\r\n        }else if(this.state.start && this.state.reset){\r\n            output = (\r\n                <div className=\"my-5\">\r\n                    <button \r\n                    className=\"btn btn-primary btn-lg px-5 ml-5\"\r\n                    onClick = {event => this.startHandler()}\r\n                    >start\r\n                    </button>\r\n                    <button \r\n                    className=\"btn btn-danger btn-lg px-5 ml-5\"\r\n                    onClick = {event => this.resetHandler()}\r\n                    >Reset\r\n                    </button>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return output\r\n\r\n    }\r\n\r\n    render() {\r\n        return this.getController()\r\n    }\r\n}\r\n\r\nexport default Controller","import React from 'react'\r\n\r\nconst Laps = (props) =>{\r\n    return(\r\n        <ul className=\"list-group list-item-flush\">\r\n            {props.laps.map((lap, index)=>{\r\n                return(\r\n                    <li key={index} className=\"list-group-item\">\r\n                            <h4>\r\n                                <span className=\"text-dark\">Minute: </span>\r\n                                <span className=\"text-danger\">{ lap.min } </span>\r\n                                <span className=\"text-dark\">Sec: </span>\r\n                                <span className=\"text-danger\">{ lap.sec } </span>\r\n                                <span className=\"text-dark\">mili: </span>\r\n                                <span className=\"text-danger\">{ lap.mili } </span>\r\n                            </h4>\r\n                        </li>\r\n                )\r\n            })}\r\n        </ul>\r\n    )\r\n}\r\nexport default Laps","import React, { Component } from 'react'\nimport Title from './Title/Title'\nimport CountDown from './countDown/CountDown'\nimport Controller from './controller/Controller'\nimport Laps from './laps/Laps'\n\n\nclass App extends Component {\n\n  constructor(props){\n    super(props)\n\n    this.state = {\n      time:{\n        min:0,\n        sec:0,\n        mili:0\n      },\n      laps:[]\n    }\n\n  }\n\n  getStarted(){\n    this.intervalId = setInterval(() => {\n      let min = this.state.time.min\n      let sec = this.state.time.sec\n      let mili = this.state.time.mili\n\n      if(mili>9){\n        mili = 0\n        sec = sec + 1\n        \n      }\n      if(sec>59){\n        min = min + 1\n        sec = 0\n      }\n\n      this.setState({\n        ...this.state,\n        time:{\n          min,\n          sec,\n          mili: mili + 1\n        }\n      })\n    },100)\n\n  }\n\n  getPause(){\n    clearInterval(this.intervalId)\n  }\n  getLap(){\n      let time = {\n        ...this.state.time\n      }\n      this.setState({\n        ...this.state,\n        laps:[time,...this.state.laps]\n      })\n      \n  }\n  getReset(){\n    this.setState({\n      time:{\n        min:0,\n        sec:0,\n        mili:0\n      },\n      laps: []\n    })\n  }\n  render() {\n   \n    return (\n      <div className=\"App\">\n        <div className=\"container py-5\">\n          <div className=\"row\">\n            <div className=\"col-sm-8 offset-sm-2\">\n              <Title />\n              <CountDown time={ this.state.time } />\n              <Controller \n              start = {this.getStarted.bind(this)}\n              pause = {this.getPause.bind(this)}\n              reset = {this.getReset.bind(this)}\n              lap = {this.getLap.bind(this)}\n              />\n              <Laps className=\"my-4\" laps={this.state.laps} />\n            </div>\n          </div>\n          \n        </div>\n      </div>\n      \n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}